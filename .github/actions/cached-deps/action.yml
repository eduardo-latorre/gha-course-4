# Always name every file that holds and action as "action"
name: 'Get & Cache Dependencies'
description: 'Get the dependencies (via npm) and cache them.'
inputs: # Using input when called
  caching: # Whatever name
    description: 'Whether to cache dependencies or not.'
    required: false
    default: 'true'
outputs:
  used-cached:
    description: 'Whether the cache was used'
    value: ${{ inputs.install.outputs.cache }} # Output step output from Gihub file
runs: # Must
  using: 'composite' # Type of action
  steps:
    - name: Cache dependencies
      if: inputs.caching # retrieving caching input value
      id: cache
      uses: actions/cache@v3
      with:
        path: node_modules
        key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
    - name: Install dependencies
      id: install # To be used in the outputs
      if: steps.cache.outputs.cache-hit != 'true' || inputs.caching != 'true' # If there's no cache yet or if caching is false, will install
      run: | # Pass cache input value to Github file
        npm ci
        echo "cache='${{ inputs.caching }}'" >> $GITHUB_OUTPUT
      shell: bash # When running commands, shell must be set
